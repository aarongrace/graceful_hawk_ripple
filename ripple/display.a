	USE	"hawk.h"	
	USE	"stdio.h"
	USE	"stdlib.h"
	USE	"common.h"
; canvas object
	INT	DEBUG	



MONITOR_START = 768

ARSIZE=4
M_LEFT_COL = 22
M_MID_COL = 36
M_THIRD_COL = 46
M_RIGHT_COL = 55
RECREATE_MONITOR:; |||||||||||||||||||||||||||||
	C_S
	LOADCOM	RF,CANVAS
	LIL	R3,C_UPPER_ROWS
	SL	R3,2
	ADD	RF,RF,R3 ;set RF to start of monitor rows

	; RA=col_printed,RB=row_printed
	LIS	RB,0
RM_ROWS_LOOP:

	LIS	RA,0
	;setting the coords for curr row and column
	LIL	R3,M_LEFT_COL
	MOVE	R4,RB
	TOSUBR	PUTAT
RM_PRINT_ROW:	
	; loading curr int into R3 and converting it from int to char
	LOADS	R3,RC
	CMPI	R3,10
	BLT	RM_LOWER_THAN_10
	; 10 plus "0" is ":", which is 7 away from "A"
	ADDI	R3,R3,7
RM_LOWER_THAN_10:
	ADDI	R3,R3,"0"
	TOSUBR	PUTCHAR

	; after printing, increment vars
	ADDSI	RC,4
	ADDSI	RA,1

	CMPI	RA,8	
	BEQ	RM_SET_MID_COL

	CMPI	RA,16
	BEQ	RM_SET_THIRD_COL

	CMPI	RA,24
	BEQ	RM_SET_RIGHT_COL

	CMPI	RA,32
	BLT	RM_PRINT_ROW
	
	ADDSI	RB,1
	CMPI	RB,8
	BLT	RM_ROWS_LOOP
	R_S

RM_SET_MID_COL:
	LIL	R3,M_MID_COL
	MOVE	R4,RB
	TOSUBR	PUTAT
	BR	RM_PRINT_ROW
	
RM_SET_THIRD_COL:
	LIL	R3,M_THIRD_COL
	MOVE	R4,RB
	TOSUBR	PUTAT
	BR	RM_PRINT_ROW
	
RM_SET_RIGHT_COL:
	LIL	R3,M_RIGHT_COL
	MOVE	R4,RB
	TOSUBR	PUTAT
	BR	RM_PRINT_ROW

ARSIZE=4
CREATE_CANVAS_WORDS:;||||||||||||||||||||||||||||||||||||
; turns the canvas array into words
; uses RF=curr_row, R6=curr word in canvas words
; uses RA=current word in row, RB=curr_row
; uses R7 = curr_bit, R8=temp_word
; R9 words to be filled for the row
	C_S
	LOADCOM	RF,CANVAS
	LIL	R6,CANVAS_WORDS

;--------------------------------------canvas scope
	LIS	RB, 0	; curr row
	LIS	R9,C_UPPER_WORDS	;words to fill
CCW_ITER_ROWS:
	LOADS	RE,RF	; RE points to current row in CANVAS

CCW_ROW_LOOP:;-------row scope
	LIS	RA, 0	; curr word in row

CCW_STORE_WORD:
;--------------word scope
	LIS	R7,0	; R7=curr_bit
	LIS	R8,0	 ; R8=temp_word
CCW_GET_BIT:	
	; loading curr int into R3 and shift it into place
	LOADS	R3,RE
	MOVE	R4,R7
CCW_SHIFT_LP:
	TESTR	R4	
	BZS	CCW_SHIFT_LP_QT
	SL	R3,4
	ADDSI	R4,-1
	BR	CCW_SHIFT_LP
CCW_SHIFT_LP_QT:
; combining the bit from array to the temp word
	OR	R8,R3
	; moving to next bit
	
	ADDSI	RE,4
	ADDSI	R7,1
	CMPI	R7,8
	BLT	CCW_GET_BIT
	STORES	R8,R6
	ADDSI	R6,4

	ADDSI	RA,1
	CMP	RA,R9	;comparing curr word to words to fill
	BLT	CCW_STORE_WORD
;-----at this point, a whole row should have been filled up

	ADDSI	RB,1
	ADDSI	RF,4	; incre canvas pointer to next row
	CMPI	RB,8
	BLT	CCW_ITER_ROWS
	R_S





RECREATE_MEMORY: ;||||||||||||||||||||||||||||||||||||||||
	C_S
	; set R6 to the row of MEMD
	LIL	R6,CANVAS_WORDS+64
	LIL	R5,MEMD_START

	; RB=row
	LIS	RB,0
RMEM_ROW_LOOP:
	; loading the word to be displayed into R3
	LOADS	R3,R6
	STORES	R3,R5
	

	ADDSI	R6,4
	ADDSI	R5,4

	ADDSI	RB,1
	CMPI	RB,8
	BLT	RMEM_ROW_LOOP
	TOSUBR  RESTORE_RETURN_ROW
	R_S


;this align directive is crucial
	ALIGN	4
EXECUTE_TEMPLATE:
	JSRS	R1, R1
	ALIGN	4

ARSIZE=0
RESTORE_RETURN_ROW:
	LIL	R3, EXECUTE_TEMPLATE	;the address that holds the template
	LOADS	R3, R3	;loading the first line of the template into R5

	LIL	R6, MEMD_RETURN	; MEMD_END, where the loop should be 

	LOADS	R4, R6		;R8 contains current contents of command row
	LIW	R5, #FFFF0000
	AND	R4, R5		; getting digits 5-8 of current contents
	OR	R3, R4		; combining with the command template
	STORES	R3,R6
	JUMPS	R1

MACRO LOAD_R reg 
	LOADS	reg,R1
	ADDSI	R1,4
ENDMAC

ARSIZE=4
RECREATE_REGISTERS:
; recreating the register, this subr does not end conventionally
; it jumps directly to MEMD_RETURN, which then goes to program cycle
	; set R6 to the row of MEMD
	LIL	R1,CANVAS_WORDS
	LOAD_R R3
	LOAD_R R4
	LOAD_R R5
	LOAD_R R6
	LOAD_R R7
	LOAD_R R8
	LOAD_R R9
	LOAD_R R10
	LOAD_R R11
	LOAD_R R12
	LOAD_R R13
	LOAD_R R14
	LOAD_R R15

	; loading the word to be displayed into R3
	LOADCOM	R1,PROGRAM_CYCLE_AD
	LIL	R2,MEMD_RETURN
	JUMPS	R2

ARSIZE = 4;|||||||||||||||||||||||||||||||||||||||
FREE_CANVAS: 
;after changing the canvas into words, there is no need to move them
	C_S
	LOADCOM	R8,CANVAS

	LIS	R9,0
FC_LP:
	LOADS	R3,R8
	TOSUBR	FREE
	ADDSI	R8,4

	ADDSI	R9,1
	CMPI	R9,C_ROWS
	BLT	FC_LP

	LOADCOM	R3,CANVAS
	TOSUBR	FREE
	R_S

	S	DISPLAY_CANVAS
	INT	DISPLAY_CANVAS
DISPLAY_CANVAS:; |||||||||||||||||||||||||||||||||||||
; this subr has no AR and directly jumps back to the program cycle
	LOADCOM	RF,CANVAS

	TOSUBR	CREATE_CANVAS_WORDS
	TOSUBR	FREE_CANVAS

	TOSUBR	RECREATE_MONITOR	;recreate hawk monitor
	TOSUBR	RECREATE_MEMORY		 ;recreate the mem 

DEBUG:
	TOSUBR	RECREATE_REGISTERS	 ;recreate the reg

	END
	


